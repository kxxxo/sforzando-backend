<?php

namespace common\models;


use common\helpers\ModelErrorHelper;
use Yii;
use yii\base\Model;
use yii\db\Exception;
use yii\web\UploadedFile;

/**
 * This is the model class for table "compilation".
 *
 * @property int $id
 * @property string|null $create_datetime
 * @property string $request_end_datetime
 * @property string $start_date
 * @property string $img_url
 * @property bool $is_ended
 * @property string $result_url
 *
 * @property CompetitionLanguage[] $competitionLanguages
 */
class Competition extends \yii\db\ActiveRecord
{

    /**
     * @var UploadedFile
     */
    public $imageFile;

    /**
     * @var UploadedFile
     */
    public $resultFile;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'competition';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['create_datetime', 'request_end_datetime', 'start_date'], 'safe'],
            [['request_end_datetime', 'start_date', 'img_url'], 'required'],
            [['img_url','result_url'], 'string'],
            [['is_ended'], 'boolean'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            [['resultFile'], 'file'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'create_datetime' => 'Create Datetime',
            'request_end_datetime' => 'Дата окончания приема заявок',
            'start_date' => 'Дата проведения',
            'img_url' => 'Img Url',
            'is_ended' => 'Is Ended',
        ];
    }

    /**
     * Gets query for [[CompetitionLanguages]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompetitionLanguages()
    {
        return $this->hasMany(CompetitionLanguage::className(), ['competition_id' => 'id'])->orderBy(['language_id'=>SORT_ASC]);
    }

    public function getCompetitionLanguage()
    {
        return $this->hasOne(CompetitionLanguage::className(), ['competition_id' => 'id'])
            ->onCondition(['language_id'=>Language::RUSSIAN])
            ;
    }
    public function beforeSave($insert)
    {
        if($insert){
            $this->create_datetime = date('Y-m-d H:i:s');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function afterSave($insert, $changedAttributes)
    {
        if($insert) {
            $languages = Language::find()->all();
            foreach ($languages as $language) {
                $model = (new CompetitionLanguage([
                    'name'=>'',
                    'nomination_id'=>$this->id,
                    'language_id'=>$language->id
                ]));
                if(!$model->save()){
                    throw new Exception(ModelErrorHelper::getModelErrorMessage($model));
                }
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
